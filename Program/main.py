from config import token
from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

import json


bot = TeleBot(token)
group = None
days = None
requst = None

with open('static/schedule.json', encoding='utf-8') as f:
	content = json.load(f)


@bot.message_handler(commands=['start'])
def handle_text(message):

	markup = ReplyKeyboardMarkup(True, True)
	markup.row('Start')	

	bot.send_message(
		message.chat.id, 
		'Здоровенькі були, <b>{0.first_name}</b>, вас обслуговує бот <b>{1.first_name}</b>.\nКозаче, я дам тобі цей клятий розклад.'.format(message.from_user, bot.get_me()), 
		parse_mode='html',
		reply_markup=markup
		)

@bot.message_handler(commands=['generate'])
def handle_text(message):

	markup = ReplyKeyboardMarkup(True, True)
	markup.row('Generate v 1.0', 'Generate v 2.0')

	bot.send_message(
		message.chat.id, 
		'<b>Вибір: </b>', 
		parse_mode='html',
		reply_markup=markup
		)

@bot.message_handler(commands=['schedule'])
def handle_text(message):

    markup = ReplyKeyboardMarkup(True, True)
    markup.row('Фільтр')

    bot.send_message(
        message.chat.id, 
        '<b>Вибір: </b>', 
        parse_mode='html',
        reply_markup=markup
        )

@bot.message_handler(commands=['instructions'])
def handle_text(message):

	markup = ReplyKeyboardMarkup(True, True)
	markup.row('Start')

	bot.send_message(
		message.chat.id, 
		'<b>Інструкція:</b>\n<code>/start</code>                     -   Вітання\n<code>/schedule</code>              -   Розклад\n<code>/instructions</code>     -  Інструкція', 
		parse_mode='html',
		reply_markup=markup           
		)

@bot.message_handler(content_types=['text'])
def handle_text(message):

	global content, group, requst

	markup = ReplyKeyboardMarkup(True, True)

	if message.text == 'Generate v 1.0':

		markup.row('Start')
		doc = open('static/винник.png', 'rb')
		caption = 'Shedule was generated!'

		bot.send_photo(message.chat.id, doc, caption)
		bot.send_message(
			message.chat.id,
			'<b>Generated by algorithm of Xuilo Daniv</b>',
			parse_mode='html',
			reply_markup=markup
			)		

	elif message.text == 'Generate v 2.0':

		markup.row('Start')
		doc = open('static/винник.png', 'rb')
		caption = 'Shedule was generated!'

		bot.send_photo(message.chat.id, doc, caption)
		bot.send_message(
			message.chat.id,
			'<b>Generated by algorithm of Pasha and Dumutro</b>',
			parse_mode='html',
			reply_markup=markup
			)		

	elif message.text == 'Фільтр' or message.text == 'Start':

		group = {'ФеС':[], 'ФеМ':[], 'ФеІ':[], 'ФеП':[]}
		g = []

		for i in content:
			g.append(i)

		for i in g:

			if g.index(i) < 5:
				group['ФеС'].append(i)
			elif 'ФеІ' in i:
				group['ФеІ'].append(i)
			elif g.index(i) == len(g)-1:
				group['ФеП'].append(i)
			else:
				group['ФеМ'].append(i)

		for i in group:
			markup.row(i)

		markup.row('Start')

		bot.send_message(
			message.chat.id,
			'<b>Спеціальність: </b>',
			parse_mode='html',
			reply_markup=markup
			)

	elif message.text in group:

		for i in group[message.text]:
			markup.row(i, 'Видати '+i)

		markup.row('Start')

		bot.send_message(
			message.chat.id,
			'<b>Група: </b>',
			parse_mode='html',
			reply_markup=markup
			)

	elif message.text in [i for k in group for i in group[k]]:

			d = [i for i in content[message.text]]

			newlist = [
			    d[2],
			    d[0],
			    d[3],
			    d[4],
			    d[1]
			    ]

			for i in newlist:
				markup.row(i)

			markup.row('Start')
			
			requst = message.text

			bot.send_message(
				message.chat.id,
				f'<b>День: </b>',
				parse_mode='html',
				reply_markup=markup
				)

	elif message.text[:6] == 'Видати':

		days = []

		d = [i for i in content[message.text[7:]]]
		p = [[], [], [], [], []]
		s = [[], [], [], [], []]

		for k in d:
			for i in content[message.text[7:]][k]:
				p[d.index(k)].append(i)
				s[d.index(k)].append(content[message.text[7:]][k][i])

		newlist_d = [
		    d[2],
		    d[0],
		    d[3],
		    d[4],
		    d[1]
			]

		newlist_p= [
		    p[2],
		    p[0],
		    p[3],
		    p[4],
		    p[1]
			]

		newlist_s = [
		    s[2],
		    s[0],
		    s[3],
		    s[4],
		    s[1]
			]

		table = ''

		for i in newlist_d:
			table += f'\n<b>{i}</b>:\n'

			for j, k in zip(newlist_p[newlist_d.index(i)], newlist_s[newlist_d.index(i)]):
				table += f'\t\t\t\t\t\t\t\t\t\t{j} пара - {k}\n'

		markup.row('Start')

		bot.send_message(
			message.chat.id,
			f'<b>Розклад: </b>\n{message.text[7:]}\nТиждень\n{table}',
			parse_mode='html',
			reply_markup=markup
			)

	elif requst != None:

		if message.text in [i for i in content[requst]]:

			d = None
			p = []
			s = []

			for i in content[requst]:
				if message.text == i:
					d = i

			for i in content[requst][d]:
				p.append(i)
				s.append(content[requst][d][i])

			table = f'\n<b>{d}</b>:\n'

			for i, j in zip(p, s):
				table += f'\t\t\t\t\t\t\t\t\t\t{i} пара - {j}\n'

			markup.row('Start')

			bot.send_message(
				message.chat.id,
				f'<b>Розклад: </b>\n{requst}\n{message.text}\n{table}',
				parse_mode='html',
				reply_markup=markup
				)

			requst = None
	else: 

		bot.send_message(
		message.chat.id, 
		'<b>Інструкція:</b>\n<code>/start</code>                     -   Вітання\n<code>/schedule</code>              -   Розклад\n<code>/instructions</code>     -  Інструкція', 
		parse_mode='html',
		reply_markup=markup
		)

if __name__ == '__main__':

	try:
		bot.polling(none_stop=True)
	except:
		bot.polling(none_stop=True)
		print('\nSome error.')
